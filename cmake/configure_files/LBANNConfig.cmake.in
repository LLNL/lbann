################################################################################
## Copyright (c) 2014-2022, Lawrence Livermore National Security, LLC.
## Produced at the Lawrence Livermore National Laboratory.
## Written by the LBANN Research Team (B. Van Essen, et al.) listed in
## the CONTRIBUTORS file. <lbann-dev@llnl.gov>
##
## LLNL-CODE-697807.
## All rights reserved.
##
## This file is part of LBANN: Livermore Big Artificial Neural Network
## Toolkit. For details, see http://software.llnl.gov/LBANN or
## https://github.com/LLNL/LBANN.
##
## Licensed under the Apache License, Version 2.0 (the "Licensee"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at:
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
## implied. See the License for the specific language governing
## permissions and limitations under the license.
################################################################################

# This will create IMPORTED targets for LBANN. The executables will be
# LBANN::<exe-name>-bin (e.g., LBANN::lbann-bin) and the library will
# be LBANN::lbann.

include("${CMAKE_CURRENT_LIST_DIR}/LBANNConfigVersion.cmake")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")
list(APPEND CMAKE_MODULE_PATH "@EXTRA_CMAKE_MODULE_DIR@")

set(LBANN_VERSION ${PACKAGE_VERSION})

set(LBANN_BUILD_TYPE "@CMAKE_BUILD_TYPE@")

# Record compiler information
set(LBANN_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(LBANN_CUDA_COMPILER "@CMAKE_CUDA_COMPILER@")

set(LBANN_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
set(LBANN_CUDA_FLAGS "@CMAKE_CUDA_FLAGS@")

set(LBANN_CXX_STANDARD "@CMAKE_CXX_STANDARD@")
set(LBANN_CUDA_STANDARD "@CMAKE_CUDA_STANDARD@")

set(LBANN_MPI_CXX_COMPILER "@MPI_CXX_COMPILER@")

# Fix the CXX and CUDA standards
if (CMAKE_CXX_STANDARD LESS LBANN_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD "${LBANN_CXX_STANDARD}")
endif ()
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)


# Record the various flags and switches accumlated in LBANN
set(LBANN_ALUMINUM_MPI_PASSTHROUGH @LBANN_ALUMINUM_MPI_PASSTHROUGH@)
set(LBANN_BUILT_WITH_SPECTRUM @LBANN_BUILT_WITH_SPECTRUM@)
set(LBANN_DATATYPE @LBANN_DATATYPE@)
set(LBANN_DETERMINISTIC @LBANN_DETERMINISTIC@)
set(LBANN_GNU_LINUX @LBANN_GNU_LINUX@)
set(LBANN_HAS_ALUMINUM @LBANN_HAS_ALUMINUM@)
set(LBANN_HAS_BOOST @LBANN_HAS_BOOST@)
set(LBANN_HAS_CEREAL @LBANN_HAS_CEREAL@)
set(LBANN_HAS_CEREAL_XML_ARCHIVES @LBANN_HAS_CEREAL_XML_ARCHIVES@)
set(LBANN_HAS_CNPY @LBANN_HAS_CNPY@)
set(LBANN_HAS_CUDA @LBANN_HAS_CUDA@)
set(LBANN_HAS_CUDNN @LBANN_HAS_CUDNN@)
set(LBANN_HAS_DIHYDROGEN @LBANN_HAS_DIHYDROGEN@)
set(LBANN_HAS_DISTCONV @LBANN_HAS_DISTCONV@)
set(LBANN_HAS_DOXYGEN @LBANN_HAS_DOXYGEN@)
set(LBANN_HAS_EMBEDDED_PYTHON @LBANN_HAS_EMBEDDED_PYTHON@)
set(LBANN_HAS_FFTW @LBANN_HAS_FFTW@)
set(LBANN_HAS_FFTW_FLOAT @LBANN_HAS_FFTW_FLOAT@)
set(LBANN_HAS_FFTW_DOUBLE @LBANN_HAS_FFTW_DOUBLE@)
set(LBANN_HAS_GPU_FP16 @LBANN_HAS_GPU_FP16@)
set(LBANN_HAS_HALF @LBANN_HAS_HALF@)
set(LBANN_HAS_HYDROGEN @LBANN_HAS_HYDROGEN@)
set(LBANN_HAS_LBANN_PROTO @LBANN_HAS_LBANN_PROTO@)
set(LBANN_HAS_MIOPEN @LBANN_HAS_MIOPEN@)
set(LBANN_HAS_NVSHMEM @LBANN_HAS_NVSHMEM@)
SET(LBANN_HAS_ONEDNN @LBANN_HAS_ONEDNN@)
SET(LBANN_HAS_ONEDNN_CPU @LBANN_HAS_ONEDNN_CPU@)
SET(LBANN_HAS_ONEDNN_GPU @LBANN_HAS_ONEDNN_GPU@)
SET(LBANN_HAS_ONEDNN_V1 @LBANN_HAS_ONEDNN_V1@)
set(LBANN_HAS_ONNX @LBANN_HAS_ONNX@)
set(LBANN_HAS_OPENCV @LBANN_HAS_OPENCV@)
set(LBANN_HAS_NCCL2 @LBANN_HAS_NCCL2@)
set(LBANN_HAS_PROTOBUF @LBANN_HAS_PROTOBUF@)
set(LBANN_HAS_PYTHON_FRONTEND @LBANN_HAS_PYTHON_FRONTEND@)
set(LBANN_HAS_ROCM @LBANN_HAS_ROCM@)
set(LBANN_HAS_TBINF @LBANN_HAS_TBINF@)
set(LBANN_HAS_VTUNE @LBANN_HAS_VTUNE@)
set(LBANN_NVPROF @LBANN_NVPROF@)
set(LBANN_TOPO_AWARE @LBANN_TOPO_AWARE@)
set(LBANN_EXPLICIT_LIBDL @LBANN_EXPLICIT_LIBDL@)
set(LBANN_HAS_CALIPER @LBANN_WITH_CALIPER@)

# Setup dependencies
include(CMakeFindDependencyMacro)

find_dependency(Threads)

find_dependency(Clara)

if (LBANN_HAS_PYTHON_FRONTEND OR LBANN_HAS_EMBEDDED_PYTHON)
  find_dependency(Python COMPONENTS Interpreter Development)
endif ()

if (LBANN_HAS_CEREAL)
  find_dependency(CEREAL CONFIG NAMES cereal CEREAL)
endif ()

if (LBANN_TOPO_AWARE)
  find_dependency(HWLOC)
endif ()

# Next, Hydrogen. We can probably inherit Aluminum-ness from
# there, as well as MPI and OpenMP.
if (LBANN_HAS_HYDROGEN)
  set(MIN_H_VERSION "@HYDROGEN_VERSION@")
  find_dependency(Hydrogen ${MIN_H_VERSION} CONFIG)

  # Fake Hydrogen components
  set(__hydrogen_have_cuda @_HYDROGEN_HAVE_CUDA@)
  set(__hydrogen_have_cub @_HYDROGEN_HAVE_CUB@)
  set(__hydrogen_have_aluminum @_HYDROGEN_HAVE_ALUMINUM@)
  set(__hydrogen_have_quadmath @_HYDROGEN_HAVE_QUADMATH@)
  set(__hydrogen_have_qd @_HYDROGEN_HAVE_QD@)
  set(__hydrogen_have_mpc @_HYDROGEN_HAVE_MPC@)

  set(__hydrogen_components
    __hydrogen_have_cuda __hydrogen_have_cub __hydrogen_have_aluminum
    __hydrogen_have_quadmath __hydrogen_have_qd __hydrogen_have_mpc)
  foreach (comp IN LISTS __hydrogen_components)
    string(SUBSTRING "${comp}" 1 -1 _tmp_comp)
    string(TOUPPER "${_tmp_comp}" match_comp)
    if (${comp} AND NOT ${match_comp})
      string(SUBSTRING "${match_comp}" 1 -1 _tmp_comp)
      message(SEND_ERROR
        "Hydrogen missing component: ${_tmp_comp}.")
      set(Hydrogen_FOUND FALSE)
    endif ()
    if (${match_comp} AND NOT ${comp})
      string(SUBSTRING "${match_comp}" 1 -1 _tmp_comp)
      message(SEND_ERROR
        "Hydrogen has extra component: ${_tmp_comp}.")
      set(Hydrogen_FOUND FALSE)
    endif ()
  endforeach()

  if (NOT Hydrogen_FOUND)
    message(FATAL_ERROR
      "A suitable version of Hydrogen could not be properly found. "
      "Please set Hydrogen_DIR to the path to the correct Hydrogen build.")
  endif ()
else ()
  message(FATAL_ERROR
    "LBANN does not have LBANN_HAS_HYDROGEN set properly. "
    "This should not be possible.")
endif (LBANN_HAS_HYDROGEN)

if (LBANN_HAS_DISTCONV)
  find_dependency(DiHydrogen "@H2_VERSION@" CONFIG
    COMPONENTS Meta Patterns DistConv)
else ()
  find_dependency(DiHydrogen "@H2_VERSION@" CONFIG
    COMPONENTS Meta Patterns)
endif (LBANN_HAS_DIHYDROGEN)

include(SetupOpenMP)
include(SetupMPI)

if (NOT Protobuf_DIR AND NOT PROTOBUF_DIR)
  set(Protobuf_DIR "@Protobuf_DIR@")
endif ()
include(SetupProtobuf)

if (LBANN_HAS_CNPY)
  find_dependency(CNPY)
endif (LBANN_HAS_CNPY)

if (LBANN_HAS_OPENCV)
  find_dependency(OpenCV CONFIG)
endif (LBANN_HAS_OPENCV)

# Setup CUDA dependencies
if (LBANN_HAS_CUDA)
  find_dependency(CUDAToolkit)
  find_dependency(cuDNN)

  if (LBANN_HAS_NVSHMEM)
    find_dependency(NVSHMEM)
  endif ()
endif (LBANN_HAS_CUDA)

if (LBANN_HAS_ROCM)
  find_dependency(hip CONFIG)
  find_dependency(MIOpen CONFIG)
  if (LBANN_HAS_FFTW)
    find_dependency(rocfft CONFIG)
  endif ()
endif ()

# FIXME: Make FFTW module understand FLOAT/DOUBLE components. Then use
# that to propagate inforamation here.
if (LBANN_HAS_FFTW)
  find_dependency(FFTW)
endif ()

if (LBANN_HAS_BOOST)
  find_dependency(Boost)
endif ()

if (LBANN_HAS_CONDUIT)
  find_dependency(Conduit "@CONDUIT_VERSION@" CONFIG REQUIRED)
endif (LBANN_HAS_CONDUIT)

if (LBANN_HAS_ONNX)
  find_dependency(ONNX CONFIG)
endif ()

if (LBANN_HAS_ONEDNN)
  find_dependency(DNNL "@DNNL_VERSION@")
endif ()

find_dependency(ZSTR)

# FIXME: Handle QUIET and REQUIRED flags properly
if (LBANN_EXPLICIT_LIBDL AND NOT DL_LIBRARY)
  find_library(DL_LIBRARY dl DOC "The dynamic loader library.")
  if (DL_LIBRARY)
    message(STATUS "Found dl: ${DL_LIBRARY}")
  else ()
    message(FATAL_ERROR
      "dl library not found! This is a required library.\n"
      "Please add the path to libdl to CMAKE_LIBRARY_PATH.")
  endif (DL_LIBRARY)
endif ()

@PACKAGE_INIT@

# Now actually import the LBANN target
set(_TMP_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIRS@")
foreach (_DIR ${_TMP_INCLUDE_DIRS})
  set_and_check(_INCLUDE_DIR "${_DIR}")
  list(APPEND LBANN_INCLUDE_DIRS "${_INCLUDE_DIR}")
endforeach (_DIR "${_TMP_INCLUDE_DIRS}")

set(_TMP_LIBRARY_DIRS "@PACKAGE_LIB_INSTALL_DIR@")
foreach (_DIR ${_TMP_LIBRARY_DIRS})
  set_and_check(_LIBRARY_DIR "${_DIR}")
  list(APPEND LBANN_LIBRARY_DIRS "${_LIBRARY_DIR}")
endforeach (_DIR ${_TMP_LIBRARY_DIRS})

if (NOT TARGET LBANN::lbann)
  include(${CMAKE_CURRENT_LIST_DIR}/LBANNTargets.cmake)
endif (NOT TARGET LBANN::lbann)

check_required_components(LBANN)

set(LBANN_LIBRARIES LBANN::lbann)
